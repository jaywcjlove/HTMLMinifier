//
//  HTMLMinifierOptions.swift
//  HTMLMinifier
//
//  Created by wong on 8/23/25.
//


/// HTML minification options
/// Most of the options are disabled by default
public struct HTMLMinifierOptions: Sendable {
    
    /// Treat attributes in case sensitive manner (useful for custom HTML tags)
    /// - Default: `false`
    public var caseSensitive: Bool
    
    /// Omit attribute values from boolean attributes
    /// - Default: `false`
    public var collapseBooleanAttributes: Bool
    
    /// Don't leave any spaces between `display:inline;` elements when collapsing.
    /// Must be used in conjunction with `collapseWhitespace=true`
    /// - Default: `false`
    public var collapseInlineTagWhitespace: Bool
    
    /// Collapse white space that contributes to text nodes in a document tree
    /// - Default: `false`
    public var collapseWhitespace: Bool
    
    /// Always collapse to 1 space (never remove it entirely).
    /// Must be used in conjunction with `collapseWhitespace=true`
    /// - Default: `false`
    public var conservativeCollapse: Bool
    
    /// Handle parse errors instead of aborting
    /// - Default: `false`
    public var continueOnParseError: Bool
    
    /// Use direct Unicode characters whenever possible
    /// - Default: `false`
    public var decodeEntities: Bool
    
    /// Parse input according to HTML5 specifications
    /// - Default: `true`
    public var html5: Bool
    
    /// Insert tags generated by HTML parser
    /// - Default: `true`
    public var includeAutoGeneratedTags: Bool
    
    /// Keep the trailing slash on singleton elements
    /// - Default: `false`
    public var keepClosingSlash: Bool
    
    /// Maximum input length to prevent ReDoS attacks (disabled by default)
    /// - Default: `nil`
    public var maxInputLength: Int?
    
    /// Specify a maximum line length.
    /// Compressed output will be split by newlines at valid HTML split-points
    /// - Default: `nil`
    public var maxLineLength: Int?
    
    /// Minify CSS in style elements and style attributes
    /// - Default: `false`
    public var minifyCSS: Bool
    
    /// Minify JavaScript in script elements and event attributes
    /// - Default: `false`
    public var minifyJS: Bool
    
    /// Minify URLs in various attributes
    /// - Default: `false`
    public var minifyURLs: Bool
    
    /// Never add a newline before a tag that closes an element
    /// - Default: `false`
    public var noNewlinesBeforeTagClose: Bool
    
    /// Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.
    /// Must be used in conjunction with `collapseWhitespace=true`
    /// - Default: `false`
    public var preserveLineBreaks: Bool
    
    /// Prevents the escaping of the values of attributes
    /// - Default: `false`
    public var preventAttributesEscaping: Bool
    
    /// Process contents of conditional comments through minifier
    /// - Default: `false`
    public var processConditionalComments: Bool
    
    /// Type of quote to use for attribute values ("'" or """)
    /// - Default: `nil`
    public var quoteCharacter: String?
    
    /// Remove quotes around attributes when possible
    /// - Default: `false`
    public var removeAttributeQuotes: Bool
    
    /// Strip HTML comments
    /// - Default: `false`
    public var removeComments: Bool
    
    /// Remove all attributes with whitespace-only values
    /// - Default: `false`
    public var removeEmptyAttributes: Bool
    
    /// Remove all elements with empty contents
    /// - Default: `false`
    public var removeEmptyElements: Bool
    
    /// Remove optional tags
    /// - Default: `false`
    public var removeOptionalTags: Bool
    
    /// Remove attributes when value matches default
    /// - Default: `false`
    public var removeRedundantAttributes: Bool
    
    /// Remove `type="text/javascript"` from `script` tags.
    /// Other `type` attribute values are left intact
    /// - Default: `false`
    public var removeScriptTypeAttributes: Bool
    
    /// Remove `type="text/css"` from `style` and `link` tags.
    /// Other `type` attribute values are left intact
    /// - Default: `false`
    public var removeStyleLinkTypeAttributes: Bool
    
    /// Remove space between attributes whenever possible.
    /// **Note that this will result in invalid HTML!**
    /// - Default: `false`
    public var removeTagWhitespace: Bool
    
    /// Sort attributes by frequency
    /// - Default: `false`
    public var sortAttributes: Bool
    
    /// Sort style classes by frequency
    /// - Default: `false`
    public var sortClassName: Bool
    
    /// Trim white space around `ignoreCustomFragments`
    /// - Default: `false`
    public var trimCustomFragments: Bool
    
    /// Replaces the `doctype` with the short (HTML5) doctype
    /// - Default: `false`
    public var useShortDoctype: Bool
    
    public init(
        caseSensitive: Bool = false,
        collapseBooleanAttributes: Bool = false,
        collapseInlineTagWhitespace: Bool = false,
        collapseWhitespace: Bool = false,
        conservativeCollapse: Bool = false,
        continueOnParseError: Bool = false,
        decodeEntities: Bool = false,
        html5: Bool = true,
        includeAutoGeneratedTags: Bool = true,
        keepClosingSlash: Bool = false,
        maxInputLength: Int? = nil,
        maxLineLength: Int? = nil,
        minifyCSS: Bool = false,
        minifyJS: Bool = false,
        minifyURLs: Bool = false,
        noNewlinesBeforeTagClose: Bool = false,
        preserveLineBreaks: Bool = false,
        preventAttributesEscaping: Bool = false,
        processConditionalComments: Bool = false,
        quoteCharacter: String? = nil,
        removeAttributeQuotes: Bool = false,
        removeComments: Bool = false,
        removeEmptyAttributes: Bool = false,
        removeEmptyElements: Bool = false,
        removeOptionalTags: Bool = false,
        removeRedundantAttributes: Bool = false,
        removeScriptTypeAttributes: Bool = false,
        removeStyleLinkTypeAttributes: Bool = false,
        removeTagWhitespace: Bool = false,
        sortAttributes: Bool = false,
        sortClassName: Bool = false,
        trimCustomFragments: Bool = false,
        useShortDoctype: Bool = false
    ) {
        self.caseSensitive = caseSensitive
        self.collapseBooleanAttributes = collapseBooleanAttributes
        self.collapseInlineTagWhitespace = collapseInlineTagWhitespace
        self.collapseWhitespace = collapseWhitespace
        self.conservativeCollapse = conservativeCollapse
        self.continueOnParseError = continueOnParseError
        self.decodeEntities = decodeEntities
        self.html5 = html5
        self.includeAutoGeneratedTags = includeAutoGeneratedTags
        self.keepClosingSlash = keepClosingSlash
        self.maxInputLength = maxInputLength
        self.maxLineLength = maxLineLength
        self.minifyCSS = minifyCSS
        self.minifyJS = minifyJS
        self.minifyURLs = minifyURLs
        self.noNewlinesBeforeTagClose = noNewlinesBeforeTagClose
        self.preserveLineBreaks = preserveLineBreaks
        self.preventAttributesEscaping = preventAttributesEscaping
        self.processConditionalComments = processConditionalComments
        self.quoteCharacter = quoteCharacter
        self.removeAttributeQuotes = removeAttributeQuotes
        self.removeComments = removeComments
        self.removeEmptyAttributes = removeEmptyAttributes
        self.removeEmptyElements = removeEmptyElements
        self.removeOptionalTags = removeOptionalTags
        self.removeRedundantAttributes = removeRedundantAttributes
        self.removeScriptTypeAttributes = removeScriptTypeAttributes
        self.removeStyleLinkTypeAttributes = removeStyleLinkTypeAttributes
        self.removeTagWhitespace = removeTagWhitespace
        self.sortAttributes = sortAttributes
        self.sortClassName = sortClassName
        self.trimCustomFragments = trimCustomFragments
        self.useShortDoctype = useShortDoctype
    }
}
